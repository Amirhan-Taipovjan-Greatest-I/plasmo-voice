package su.plo.voice.api.server.connection;

import lombok.NonNull;
import su.plo.voice.api.server.event.connection.UdpClientConnectEvent;
import su.plo.voice.api.server.event.connection.UdpClientDisconnectedEvent;
import su.plo.voice.api.server.player.VoiceServerPlayer;
import su.plo.voice.api.server.socket.UdpServerConnection;

import java.util.Optional;
import java.util.UUID;

/**
 * Manages {@link UdpServerConnection}s and it's secrets
 * <br/>
 * Secrets are used to identify UDP connection owner
 * Secret -> VoicePlayer
 */
public interface UdpServerConnectionManager extends UdpConnectionManager<VoiceServerPlayer, UdpServerConnection> {

    /**
     * Gets the player uuid by secret
     * <br/>
     * Secret is generated by calling {@link #getSecretByPlayerId(UUID)}
     *
     * @return player by secret
     */
    Optional<UUID> getPlayerIdBySecret(@NonNull UUID secret);

    /**
     * Gets stored secret or generates a new one for player uuid
     *
     * @return secret by player uuid
     */
    UUID getSecretByPlayerId(@NonNull UUID playerUUID);

    /**
     * Adds the connection to connections map
     * <br/>
     * This method calls {@link UdpClientConnectEvent} before adding connection to the map
     */
    void addConnection(@NonNull UdpServerConnection connection);

    /**
     * Removes connection from connections map
     * <br/>
     * This method calls {@link UdpClientDisconnectedEvent} after removing connection from the map
     *
     * @return true if the map contained the specified connection
     */
    boolean removeConnection(@NonNull UdpServerConnection connection);

    /**
     * Removes connection by player from connections map
     * <br/>
     * This method calls {@link UdpClientDisconnectedEvent} after removing connection from the map
     *
     * @return true if the map contained the specified connection
     */
    boolean removeConnection(VoiceServerPlayer player);

    /**
     * Removes connection by secret from connections map
     * <br/>
     * This method calls {@link UdpClientDisconnectedEvent} after removing connection from the map
     *
     * @return true if the map contained the specified connection
     */
    boolean removeConnection(UUID secret);

    /**
     * Clears all connections
     * <br/>
     * This method calls {@link UdpClientDisconnectedEvent} for each element in the map
     */
    void clearConnections();
}
